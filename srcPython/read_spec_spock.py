# This scipr treads the specular position files generated by SpOCK. It's inspred from a previsous script read_spec_file.py
import os
import sys 

from read_input_file import *

from find_in_read_input_order_variables import *

def read_spec_spock(input_filename):
    
    #input_filename = sys.argv[1]

    # READ THE PROPAGATOR INPUT FILE
    var_in, var_in_order = read_input_file(input_filename)
    output_path_propagator = var_in[find_in_read_input_order_variables(var_in_order, 'output_file_path_list')]; 
    output_file_propagator = var_in[find_in_read_input_order_variables(var_in_order, 'output_file_name_list')]; 
    dt = var_in[find_in_read_input_order_variables(var_in_order, 'dt')]; 
    nb_steps = var_in[find_in_read_input_order_variables(var_in_order, 'nb_steps')]; 
    nb_satellites = var_in[find_in_read_input_order_variables(var_in_order, 'nb_sc')]; 
    date_start = var_in[find_in_read_input_order_variables(var_in_order, 'date_start')]
    date_stop = var_in[find_in_read_input_order_variables(var_in_order, 'date_stop')]
    gps_name = var_in[find_in_read_input_order_variables(var_in_order, 'gps_name')]

    # READ THE POSITIONS OF THE SPECULAR POINTS, THE GPS AND THE CYGNSS SATELLITES
    nb_spec_pts = 4;
    interpolation_step = 1 # in second, interpolation step of find_specular_points.c (1 s usually)
    nb_steps_interpolation = (int)((nb_steps-1) * dt / interpolation_step) # the specular output of find_specular_points.c stops one time step before the end of the propagation

    nb_gps = len(gps_name)
    ecef_spec = np.zeros([nb_spec_pts, nb_satellites, nb_steps_interpolation, 3]) + 99999999
    lon_spec = np.zeros([nb_spec_pts, nb_satellites, nb_steps_interpolation]) + 99999999
    lat_spec = np.zeros([nb_spec_pts, nb_satellites, nb_steps_interpolation]) + 99999999

    for i in range(nb_satellites):
        print i, nb_satellites - 1
        count_less_than_4_spec = 0
        time_less_than_4_spec = []
        file_specular = open(output_path_propagator[i] + "specular_" + output_file_propagator[i].split('/')[-1], "r")
        read_file_specular  = file_specular.readlines()
        # Nb of lines in the spec file header
        if (i == 0):
            nb_lines_header_output_file_spec = 0
            while (read_file_specular[nb_lines_header_output_file_spec].split()[0] != "#START"):
                nb_lines_header_output_file_spec = nb_lines_header_output_file_spec + 1
            nb_lines_header_output_file_spec = nb_lines_header_output_file_spec + 1
        ispec_save = 0
        j = -1
        while (ispec_save < len(read_file_specular)-1-nb_spec_pts):
    #        print ispec_save, len(read_file_specular)-1-nb_spec_pts
            j = j + 1
            time_spec_sublist_temp_ini = read_file_specular[ispec_save+nb_lines_header_output_file_spec].split()[0] 
            time_spec_sublist_temp_ini = datetime.strptime(time_spec_sublist_temp_ini, "%Y-%m-%dT%H:%M:%S")
            lon_spec[0,i,j] = np.float(read_file_specular[nb_lines_header_output_file_spec+ispec_save].split()[1])
            lat_spec[0,i,j] = np.float(read_file_specular[nb_lines_header_output_file_spec+ispec_save].split()[2])
            ecef_spec[0,i,j,0] = np.float(read_file_specular[nb_lines_header_output_file_spec+ispec_save].split()[-3])
            ecef_spec[0,i,j,1] = np.float(read_file_specular[nb_lines_header_output_file_spec+ispec_save].split()[-2])
            ecef_spec[0,i,j,2] = np.float(read_file_specular[nb_lines_header_output_file_spec+ispec_save].split()[-1])
            ispec = 1
            while (datetime.strptime(read_file_specular[nb_lines_header_output_file_spec+ispec_save+ispec].split()[0], "%Y-%m-%dT%H:%M:%S")  == time_spec_sublist_temp_ini):
                lon_spec[ispec,i,j] = np.float(read_file_specular[nb_lines_header_output_file_spec+ispec_save+ispec].split()[1])
                lat_spec[ispec,i,j] = np.float(read_file_specular[nb_lines_header_output_file_spec+ispec_save+ispec].split()[2])
                ecef_spec[ispec,i,j,0] = np.float(read_file_specular[nb_lines_header_output_file_spec+ispec_save+ispec].split()[-3])
                ecef_spec[ispec,i,j,1] = np.float(read_file_specular[nb_lines_header_output_file_spec+ispec_save+ispec].split()[-2])
                ecef_spec[ispec,i,j,2] = np.float(read_file_specular[nb_lines_header_output_file_spec+ispec_save+ispec].split()[-1])
                ispec = ispec + 1
                if ( (nb_lines_header_output_file_spec+ispec_save+ispec == len(read_file_specular)) | (read_file_specular[nb_lines_header_output_file_spec+ispec_save+ispec] == "\n")):
                    break

            if ispec < 4:
                count_less_than_4_spec = count_less_than_4_spec + 1
    #            time_less_than_4_spec.append(read_file_specular[nb_lines_header_output_file_spec+ispec_save+ispec].split()[0])
            ispec_save = ispec + ispec_save

        # if i == 1:
        #     raise Exception

    return lon_spec, lat_spec, ecef_spec



