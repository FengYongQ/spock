# This script compares the psotion of one CYGNSS satellite with the netcdf files from cygnss-sftp-1
# Assumptions:
# - see section PARAMETERS TO SET UP BEFORE RUNNING THIS SCRIPT

from datetime import datetime, timedelta
import numpy as np
import os
import sys
sys.path.append("/Users/cbv/Google Drive/Work/PhD/Research/Code/spock/srcPython")
#sys.path.append("/home/cbv/spock_development_new_structure_kalman_dev/srcPython")
from os import listdir
from read_input_file import *
from read_output_file import *
from cygnss_read_spock_spec import *
from netCDF4 import Dataset
import numpy.ma as ma
from spock_main_input import *
import matplotlib.colors as colors
import matplotlib.cm as cmx
import matplotlib.gridspec as gridspec
from matplotlib.colors import LogNorm
from matplotlib import pyplot as plt
from ecef2eci import *
from eci_to_lvlh import *
import pickle
from cygnss_name_to_norad_id import *

# PARAMETERS TO SET UP BEFORE RUNNING THIS SCRIPT
cygfm = 1 # which CYGNSS to look at
downlowd_netcdf =0 # set this variable to 1 if the entcdf files have not been download yet for the interval of time specified by [date_start_val, date_stop_val]

date_start = "2017-06-02T00:00:00"
date_stop = "2017-06-02T06:00:00"
# end of PARAMETERS TO SET UP BEFORE RUNNING THIS SCRIPT

date_start_date = datetime.strptime(date_start, "%Y-%m-%dT%H:%M:%S")
date_stop_date = datetime.strptime(date_stop, "%Y-%m-%dT%H:%M:%S")


# SpOCK
## Download CYGNSS TLE
cygfm_name = 'FM0' + str(cygfm)
norad = cygnss_name_to_norad_id(cygfm_name)

#os.system("python cygnss_tle_one_sc.py " + date_start[:10] + ' ' + norad)

## Create SpOCK main input file
prefix_main_input_filename = 'rho05'#'grav50_'
main_input_filename = prefix_main_input_filename + cygfm_name + '_' + date_start.replace(":", "_") + '_to_' + date_stop.replace(":", "_") + ".txt"
dt = 1.0
nb_sc = 1
gps_tle = '0'
mass = '28'
geometry_filename  = 'cygnss_geometry_2016_acco.txt'
tle_filename = "cygnss_" + norad + '_' + date_start[:10] + ".txt"
gravity_order = '10'
forces = 'drag sun_gravity moon_gravity'
density_mode = 'dynamic'
name_output = 'spock/out'
dt_output = '60'
spice_path  = '/Users/cbv/cspice/data'
spock_main_input(
     main_input_filename,
    # for TIME section
    date_start,
    date_stop,
    dt,
    # for SPACECRAFT section
    nb_sc,
    gps_tle,
    mass,
    geometry_filename, 
    # for ORBIT section
    tle_filename,
    # for FORCES section
    gravity_order,
    forces,
    density_mode,
    # for OUTPUT section
    name_output,
    dt_output,
    # for ATTITUDE section
    "nadir",
    # for GROUNDS_STATIONS section
    "0",#"my_ground_stations.txt"
     # for SPICE section
     spice_path,
     # for DENSITY_MOD section
     0.5
    )

## Run SpOCK
os.system("mpirun -np 1 spock " + main_input_filename)

## Read position and velocity output by SpOCK

var_in, var_in_order = read_input_file(main_input_filename)
dt_spock_output = var_in[find_in_read_input_order_variables(var_in_order, 'dt_output')]; 
output_file_path_list = var_in[find_in_read_input_order_variables(var_in_order, 'output_file_path_list')]; 
output_file_name_list = var_in[find_in_read_input_order_variables(var_in_order, 'output_file_name_list')];
isc = 0
var_out, var_out_order = read_output_file(output_file_path_list[isc] + output_file_name_list[isc], ["position_ecef","velocity_ecef","position_tle","velocity_tle"] )
r_cyg_spock_ecef_file = var_out[find_in_read_input_order_variables(var_out_order, 'position_ecef')]
v_cyg_spock_ecef_file = var_out[find_in_read_input_order_variables(var_out_order, 'velocity_ecef')]
r_cyg_spock_eci_tle = var_out[find_in_read_input_order_variables(var_out_order, 'position_tle')]
v_cyg_spock_eci_tle = var_out[find_in_read_input_order_variables(var_out_order, 'velocity_tle')]
date_spock_not_interpolated_temp = var_out[find_in_read_input_order_variables(var_out_order, 'date')]
date_spock_not_interpolated = []
for ii in range(len(date_spock_not_interpolated_temp)):
    date_here = date_spock_not_interpolated_temp[ii]
    date_here_date = datetime.strptime(date_here[:19], "%Y/%m/%d %H:%M:%S") # !!!!!! don't look at microseconds since SpOCK outputs at best eevey second anyway (so microseeconds should be 0)
    date_spock_not_interpolated.append(date_here_date)
    #date_spock_not_interpolated is the date directly output by SpOCK so it's with touput time step chosen in the main input file


# Netcdf on cygnss-sftp-1
date_start_doy = (int)((datetime.strptime( date_start, "%Y-%m-%dT%H:%M:%S" )).strftime('%j'))# - timedelta(days = 2)).strftime('%j')) # start two day earlier so you can compare 
# to the position given by the TLE that was used to initialize SpOCK. TLEs are usually output every day but go 2 days back to make sure
date_stop_doy = (int)(datetime.strptime( date_stop, "%Y-%m-%dT%H:%M:%S" ).strftime('%j'))
if datetime.strptime( date_stop, "%Y-%m-%dT%H:%M:%S" ).strftime('%Y') != '2017':
    print "***!The analysis has to be for data in 2017. The program will stop. !***"; raise Exception
doy_array = np.arange(date_start_doy, date_stop_doy+1, 1)
nb_day = len(doy_array)
day_remove = [] # list of days to remove from the analysis
day_list = []
for iday in range(nb_day):
    if (os.path.isdir("/Users/cbv/cygnss/netcdf/" + str(doy_array[iday]).zfill(3)) == False):
        os.system("mkdir /Users/cbv/cygnss/netcdf/" + str(doy_array[iday]).zfill(3))
    if downlowd_netcdf == 1:
        os.system("scp -p cygnss-sftp-1.engin.umich.edu:/data/cygnss/products/l1/2017/" + str(doy_array[iday]).zfill(3) + "/cyg0" + str(cygfm) + "* /Users/cbv/cygnss/netcdf/" + str(doy_array[iday]).zfill(3))
    if len([x for x in os.listdir("/Users/cbv/cygnss/netcdf/" + str(doy_array[iday]).zfill(3)) if x.endswith(".nc") and x.startswith("cyg0" + str(cygfm))]) != 1: # if more than one file for this sc then don't take this day into account in the analsyis OR if no netcdf
        day_remove.append(iday)
    else:
        day_list.append(iday)

nb_day = len(day_list)

################
################
################
# For each day, read the specular point position from the netcdf file
x_spec_netcdf = []
y_spec_netcdf = []
z_spec_netcdf = []
x_cyg_netcdf = []
y_cyg_netcdf = []
z_cyg_netcdf = []
vx_cyg_netcdf = []
vy_cyg_netcdf = []
vz_cyg_netcdf = []

x_cyg_netcdf_dt_output = [] # this is to compare to the r/v output in ECEF_ output SpOCK files
y_cyg_netcdf_dt_output = []
z_cyg_netcdf_dt_output = []
vx_cyg_netcdf_dt_output = []
vy_cyg_netcdf_dt_output = []
vz_cyg_netcdf_dt_output = []

gain_netcdf = []
date_flight = []
date_flight_rounded = []
index_in_spock_date_netcdf_same = [] 
index_in_spock_not_interpolated_date_netcdf_same = []
nb_seconds_since_initial_epoch_spock = []
iday_count = -1
while iday_count < 0:# !!!!! should be nb_day-1:
    iday_count = iday_count + 1
    iday_here = day_list[iday_count]
    filename_spec_flight = "/Users/cbv/cygnss/netcdf/" + str(doy_array[iday_here]).zfill(3) + "/" + [x for x in os.listdir("/Users/cbv/cygnss/netcdf/" + str(doy_array[iday_here]).zfill(3)) if x.endswith(".nc") and x.startswith("cyg0" + str(cygfm))][0]
    fh = Dataset(filename_spec_flight, mode='r')
    # nc_attrs = fh.ncattrs()
    # nc_dims = [dim for dim in fh.dimensions]  # list of nc dimensions
    # nc_vars = [var for var in fh.variables]  # list of nc variables

    x_spec_netcdf_temp = fh.variables['sp_pos_x'][:] # X component of the specular point position in the ECEF coordinate system, in meters, at ddm_timestamp_utc, as calculated on the ground.
    y_spec_netcdf_temp = fh.variables['sp_pos_y'][:]
    z_spec_netcdf_temp = fh.variables['sp_pos_z'][:]
    x_cyg_netcdf_temp = fh.variables['sc_pos_x'][:]
    y_cyg_netcdf_temp = fh.variables['sc_pos_y'][:]
    z_cyg_netcdf_temp= fh.variables['sc_pos_z'][:]
    gain_netcdf_temp = fh.variables['sp_rx_gain'][:] # The receive antenna gain in the direction of the specular point, in dBi, at ddm_timestamp_utc
    vx_cyg_netcdf_temp = fh.variables['sc_vel_x'][:]
    vy_cyg_netcdf_temp = fh.variables['sc_vel_y'][:]
    vz_cyg_netcdf_temp= fh.variables['sc_vel_z'][:]


    list_are_masked_array = [] # sometimes the netcdf varaible below are maksed array and soemtimes they are not (depending on which netcdf file)...
    if type(x_spec_netcdf_temp) == ma.core.MaskedArray:
        list_are_masked_array.append(x_spec_netcdf_temp)
    if type(y_spec_netcdf_temp) == ma.core.MaskedArray:
        list_are_masked_array.append(y_spec_netcdf_temp)
    if type(z_spec_netcdf_temp) == ma.core.MaskedArray:
        list_are_masked_array.append(z_spec_netcdf_temp)
    if type(gain_netcdf_temp) == ma.core.MaskedArray:
        list_are_masked_array.append(gain_netcdf_temp)
    nb_mask_array = len(list_are_masked_array)

    time_flight = fh.variables['ddm_timestamp_utc'][:]
    time_coverage_start = fh.getncattr(fh.ncattrs()[fh.ncattrs().index('time_coverage_start')])
    time_coverage_start_datetime = datetime.strptime(time_coverage_start[:-4], "%Y-%m-%dT%H:%M:%S.%f") 
    fh.close()
    nb_time_flight_temp = len(x_cyg_netcdf_temp)
    date_flight_t = []
    date_flight_rounded_temp = []
    time_remove_list = []
    itime = -1
    date_flight_raw = []
    while itime < nb_time_flight_temp - 60:
        itime = itime + 1
        print itime, nb_time_flight_temp-1, iday_count, nb_day-1
        time_remove = 0
        date_flight_temp_date = time_coverage_start_datetime + timedelta(microseconds = round(time_flight[itime]*10**6))
        date_flight_temp = datetime.strftime(date_flight_temp_date, "%Y-%m-%dT%H:%M:%S.%f" )
        # round to neared second but only if the actual time is less than 100 ms from the nearest second, otherwise ignore this time (don't compare to SpOCK)
        # .This is because SpOCK propagates with 1 s time step. So to compare to the netcdf file, we assume that the netcdf is also exactly at each second (so no millisecond). 
        #100 ms wrong is not too bad because the satellite movesby less than 1 km.
        if ( date_flight_temp.split('.')[1][0] == '9' ): # round to next second
            date_flight_temp_date = datetime.strptime(date_flight_temp, "%Y-%m-%dT%H:%M:%S.%f")
            date_flight_date = date_flight_temp_date + timedelta(seconds = 1)
            date_flight_date_rounded_temp = datetime.strftime(date_flight_date, "%Y-%m-%dT%H:%M:%S.%f").split('.')[0]
            date_flight_date_rounded = datetime.strptime(date_flight_date_rounded_temp, "%Y-%m-%dT%H:%M:%S")
        elif ( date_flight_temp.split('.')[1][0] == '0' ): # round to next second
            date_flight_date_rounded = datetime.strptime(date_flight_temp.split('.')[0], "%Y-%m-%dT%H:%M:%S" )
        else: #if time can't be rounded by less than 100 ms
            time_remove = 1

        # only select times in netcdf that are also date of SpOCK output (SpOCK output as specified in main input  file, not output imes of spec (these are very second))
            #print np.mod( (date_flight_date_rounded - date_spock_not_interpolated[0]).total_seconds(), dt_spock_output ), date_flight_date_rounded, date_flight_temp_date
        while ( np.mod( (date_flight_date_rounded - date_spock_not_interpolated[0]).total_seconds(), dt_spock_output ) != 0 ):
            itime = itime + 1
            date_flight_temp_date = time_coverage_start_datetime + timedelta(microseconds = round(time_flight[itime]*10**6))
            date_flight_temp = datetime.strftime(date_flight_temp_date, "%Y-%m-%dT%H:%M:%S.%f" )
            # round to neared second but only if the actual time is less than 100 ms from the nearest second, otherwise ignore this time (don't compare to SpOCK)
            # .This is because SpOCK propagates with 1 s time step. So to compare to the netcdf file, we assume that the netcdf is also exactly at each second (so no millisecond). 
            #100 ms wrong is not too bad because the satellite movesby less than 1 km.
            if ( date_flight_temp.split('.')[1][0] == '9' ): # round to next second
                date_flight_temp_date = datetime.strptime(date_flight_temp, "%Y-%m-%dT%H:%M:%S.%f")
                date_flight_date = date_flight_temp_date + timedelta(seconds = 1)
                date_flight_date_rounded_temp = datetime.strftime(date_flight_date, "%Y-%m-%dT%H:%M:%S.%f").split('.')[0]
                date_flight_date_rounded = datetime.strptime(date_flight_date_rounded_temp, "%Y-%m-%dT%H:%M:%S")
            elif ( date_flight_temp.split('.')[1][0] == '0' ): # round to next second
                date_flight_date_rounded = datetime.strptime(date_flight_temp.split('.')[0], "%Y-%m-%dT%H:%M:%S" )
            else: #if time can't be rounded by less than 100 ms
                time_remove = 1


                #print itime, time_coverage_start_datetime + timedelta(microseconds = round(time_flight[itime]*10**6)), x_cyg_netcdf_temp[itime]/1000.
        #print 'XXXXXXXXXXXXX', date_flight_temp
        date_flight_raw.append(date_flight_temp)
        imask_arr = 0
        while (imask_arr < nb_mask_array):
                    #if ( ( True in x_spec_netcdf_temp.mask[itime] ) | ( True in y_spec_netcdf_temp.mask[itime] ) | ( True in z_spec_netcdf_temp.mask[itime] ) | ( True in gain_netcdf_temp.mask[itime] ) ):# id one of the 4 spec is masked then ignore this time
            if (  True in list_are_masked_array[imask_arr].mask[itime] ):
                 time_remove = 1
            imask_arr = imask_arr + 1     

        if ( (time_remove == 0) & (date_flight_date_rounded in date_spock_not_interpolated)): # if this time is in date_spock_not_interpolated. If it's not, don't remove the time though. the time should be removed if it's not a time when the spec position 
            #were predicted by spock. here we're looking at the sc position (every output time step chosen in the main input file).
            index_in_spock_not_interpolated_date_netcdf_same.append(date_spock_not_interpolated.index(date_flight_date_rounded))
            x_cyg_netcdf_dt_output.append(x_cyg_netcdf_temp[itime]/1000.)
            y_cyg_netcdf_dt_output.append(y_cyg_netcdf_temp[itime]/1000.)
            z_cyg_netcdf_dt_output.append(z_cyg_netcdf_temp[itime]/1000.)
            vx_cyg_netcdf_dt_output.append(vx_cyg_netcdf_temp[itime]/1000.)
            vy_cyg_netcdf_dt_output.append(vy_cyg_netcdf_temp[itime]/1000.)
            vz_cyg_netcdf_dt_output.append(vz_cyg_netcdf_temp[itime]/1000.)
        else:
            time_remove = 1
    

        if ( time_remove == 1 ): # remove time if can't be rounded by ess than 100 ms or if is not in date_spock or if masked
            time_remove_list.append(itime)
        else:
            if type(x_spec_netcdf_temp) == ma.core.MaskedArray:
                x_spec_netcdf.append(x_spec_netcdf_temp.data[itime]/1000.)
            else:
                x_spec_netcdf.append(x_spec_netcdf_temp[itime]/1000.)
            if type(y_spec_netcdf_temp) == ma.core.MaskedArray:
                y_spec_netcdf.append(y_spec_netcdf_temp.data[itime]/1000.)
            else:
                y_spec_netcdf.append(y_spec_netcdf_temp[itime]/1000.)
            if type(z_spec_netcdf_temp) == ma.core.MaskedArray:
                z_spec_netcdf.append(z_spec_netcdf_temp.data[itime]/1000.)
            else:
                z_spec_netcdf.append(z_spec_netcdf_temp[itime]/1000.)
            if type(gain_netcdf_temp) == ma.core.MaskedArray:
                gain_netcdf.append(gain_netcdf_temp.data[itime])
            else:
                gain_netcdf.append(gain_netcdf_temp[itime])
            x_cyg_netcdf.append(x_cyg_netcdf_temp[itime]/1000.)
            y_cyg_netcdf.append(y_cyg_netcdf_temp[itime]/1000.)
            z_cyg_netcdf.append(z_cyg_netcdf_temp[itime]/1000.)
            date_flight_rounded.append(date_flight_date_rounded)
            date_flight.append(date_flight_temp)

            vx_cyg_netcdf.append(vx_cyg_netcdf_temp[itime]/1000.)
            vy_cyg_netcdf.append(vy_cyg_netcdf_temp[itime]/1000.)
            vz_cyg_netcdf.append(vz_cyg_netcdf_temp[itime]/1000.)
            
            nb_seconds_since_initial_epoch_spock.append( ( date_flight_date_rounded - date_spock_not_interpolated[0] ).total_seconds() )


        if date_flight_date_rounded > date_spock_not_interpolated[-1]:
            iday_count = nb_day + 1
            break






# Compare SpOCK and netcdf position and velocity
nb_time_flight_rounded = len(date_flight_rounded)
date_netcdf = np.array( date_flight_rounded )
nb_seconds_since_initial_epoch_spock = np.array(nb_seconds_since_initial_epoch_spock)

# Compare SpOCK and netcdf
## Select the dates that are both in SpOCK and netcdf



r_cyg_spock_ecef_file_same_time_as_netcdf = np.zeros([len(index_in_spock_not_interpolated_date_netcdf_same), 3])
v_cyg_spock_ecef_file_same_time_as_netcdf = np.zeros([len(index_in_spock_not_interpolated_date_netcdf_same), 3])
r_cyg_spock_ecef_file_same_time_as_netcdf[:, 0] = r_cyg_spock_ecef_file[index_in_spock_not_interpolated_date_netcdf_same, 0]
r_cyg_spock_ecef_file_same_time_as_netcdf[:, 1] = r_cyg_spock_ecef_file[index_in_spock_not_interpolated_date_netcdf_same, 1]
r_cyg_spock_ecef_file_same_time_as_netcdf[:, 2] = r_cyg_spock_ecef_file[index_in_spock_not_interpolated_date_netcdf_same, 2]
v_cyg_spock_ecef_file_same_time_as_netcdf[:, 0] = v_cyg_spock_ecef_file[index_in_spock_not_interpolated_date_netcdf_same, 0]
v_cyg_spock_ecef_file_same_time_as_netcdf[:, 1] = v_cyg_spock_ecef_file[index_in_spock_not_interpolated_date_netcdf_same, 1]
v_cyg_spock_ecef_file_same_time_as_netcdf[:, 2] = v_cyg_spock_ecef_file[index_in_spock_not_interpolated_date_netcdf_same, 2]

date_spock_not_interpolated = np.array(date_spock_not_interpolated)
date_spock_not_interpolated_same_time_as_netcdf = date_spock_not_interpolated[index_in_spock_not_interpolated_date_netcdf_same]



# in the spec files, so we need to look at the ECEF_ files 
r_cyg_eci_spock = np.zeros([len(index_in_spock_not_interpolated_date_netcdf_same), 3])
v_cyg_eci_spock = np.zeros([len(index_in_spock_not_interpolated_date_netcdf_same), 3])
r_cyg_netcdf_dt_output = np.zeros([len(index_in_spock_not_interpolated_date_netcdf_same), 3])
v_cyg_netcdf_dt_output = np.zeros([len(index_in_spock_not_interpolated_date_netcdf_same), 3])
r_cyg_eci_netcdf_dt_output = np.zeros([len(index_in_spock_not_interpolated_date_netcdf_same), 3])
v_cyg_eci_netcdf_dt_output = np.zeros([len(index_in_spock_not_interpolated_date_netcdf_same), 3])
r_cyg_lvlh_diff = np.zeros([len(index_in_spock_not_interpolated_date_netcdf_same), 3])
v_cyg_lvlh_diff = np.zeros([len(index_in_spock_not_interpolated_date_netcdf_same), 3])
for itime in range(len(index_in_spock_not_interpolated_date_netcdf_same)):
    # ECEF to ECI for SpOCK
    if itime == 0:
        r_cyg_eci_spock[itime, :], v_cyg_eci_spock[itime, :] = ecef2eci(r_cyg_spock_ecef_file_same_time_as_netcdf[itime, :], v_cyg_spock_ecef_file_same_time_as_netcdf[itime, :], datetime.strftime(date_spock_not_interpolated_same_time_as_netcdf[itime], "%Y-%m-%dT%H:%M:%S"), 1)
    else:
        r_cyg_eci_spock[itime, :], v_cyg_eci_spock[itime, :] = ecef2eci(r_cyg_spock_ecef_file_same_time_as_netcdf[itime, :], v_cyg_spock_ecef_file_same_time_as_netcdf[itime, :], datetime.strftime(date_spock_not_interpolated_same_time_as_netcdf[itime], "%Y-%m-%dT%H:%M:%S"), 0)
    # ECEF to ECI for netcdf
    r_cyg_netcdf_dt_output[itime,:] = np.array([x_cyg_netcdf_dt_output[itime], y_cyg_netcdf_dt_output[itime], z_cyg_netcdf_dt_output[itime]])
    v_cyg_netcdf_dt_output[itime,:] = np.array([vx_cyg_netcdf_dt_output[itime], vy_cyg_netcdf_dt_output[itime], vz_cyg_netcdf_dt_output[itime]])
    r_cyg_eci_netcdf_dt_output[itime,:], v_cyg_eci_netcdf_dt_output[itime,:] = ecef2eci( r_cyg_netcdf_dt_output[itime,:], v_cyg_netcdf_dt_output[itime,:], datetime.strftime(date_spock_not_interpolated_same_time_as_netcdf[itime], "%Y-%m-%dT%H:%M:%S"), 0)
    # Distance in ECI from netcdf to SpOCK
    r_cyg_eci_diff = r_cyg_eci_netcdf_dt_output[itime,:] - r_cyg_eci_spock[itime, :] 
    v_cyg_eci_diff = v_cyg_eci_netcdf_dt_output[itime,:] - v_cyg_eci_spock[itime, :]
    # Distance in LVLH (refce SpOCK) 
    r_cyg_lvlh_diff[itime,:] = eci_to_lvlh(r_cyg_eci_spock[itime, :], v_cyg_eci_spock[itime, :], r_cyg_eci_diff)
    v_cyg_lvlh_diff[itime,:] = eci_to_lvlh(r_cyg_eci_spock[itime, :], v_cyg_eci_spock[itime, :], v_cyg_eci_diff)



# Plot difference in LVLH (SpOCK refce sc)
## Parameters for the figure
height_fig = 11.  # the width is calculated as height_fig * 4/3.
fontsize_plot = 25
ratio_fig_size = 4./3
# Position difference
fig_title = 'Distance netcdf to SpOCK'
y_label = 'Distance (km)'
x_label = 'Time (hours)'
fig = plt.figure(num=None, figsize=(height_fig * ratio_fig_size, height_fig), dpi=80, facecolor='w', edgecolor='k')

fig.suptitle(fig_title, y = 0.965,fontsize = (int)(fontsize_plot*1.1), weight = 'bold',)
plt.rc('font', weight='bold') ## make the labels of the ticks in bold
gs = gridspec.GridSpec(1, 1)
gs.update(left = 0.11, right=0.87, top = 0.93,bottom = 0.12, hspace = 0.01)
ax = fig.add_subplot(gs[0, 0])

ax.set_ylabel(y_label, weight = 'bold', fontsize  = fontsize_plot)
ax.set_xlabel(x_label, weight = 'bold', fontsize  = fontsize_plot)

[i.set_linewidth(2) for i in ax.spines.itervalues()] # change the width of the frame of the figure
ax.tick_params(axis='both', which='major', labelsize=fontsize_plot, size = 10, width = 2, pad = 7) 
plt.rc('font', weight='bold') ## make the labels of the ticks in bold

ax.plot(nb_seconds_since_initial_epoch_spock/3600., r_cyg_lvlh_diff[:,0], linewidth = 2, color = 'b', label = 'Along-track' )
ax.plot(nb_seconds_since_initial_epoch_spock/3600., r_cyg_lvlh_diff[:,1], linewidth = 2, color = 'm', label = 'Cross-track' )
ax.plot(nb_seconds_since_initial_epoch_spock/3600., r_cyg_lvlh_diff[:,2], linewidth = 2, color = 'r', label = 'Radial')

ax.set_ylim([np.min(r_cyg_lvlh_diff), np.max(r_cyg_lvlh_diff)])
ax.set_xlim([0, np.max(nb_seconds_since_initial_epoch_spock/3600.)])
ax.margins(0,0)
legend = ax.legend(loc='upper right', bbox_to_anchor=(0, 1), numpoints = 1,  title="", fontsize = fontsize_plot)
legend.get_title().set_fontsize(str(fontsize_plot))


fig_save_name = (cygfm_name + '_' + date_start.replace(":", "_") + '_to_' + date_stop.replace(":", "_") + ".txt").replace(".txt", "_difference_position_SpOCK_netcdf_lvlh.pdf")
fig.savefig(fig_save_name, facecolor=fig.get_facecolor(), edgecolor='none', bbox_inches='tight')  


# Velocity difference
fig_title = 'Velocity difference netcdf to SpOCK'
y_label = 'Velocity difference (km)'
x_label = 'Time (hours)'
fig = plt.figure(num=None, figsize=(height_fig * ratio_fig_size, height_fig), dpi=80, facecolor='w', edgecolor='k')

fig.suptitle(fig_title, y = 0.965,fontsize = (int)(fontsize_plot*1.1), weight = 'bold',)
plt.rc('font', weight='bold') ## make the labels of the ticks in bold
gs = gridspec.GridSpec(1, 1)
gs.update(left = 0.11, right=0.87, top = 0.93,bottom = 0.12, hspace = 0.01)
ax = fig.add_subplot(gs[0, 0])

ax.set_ylabel(y_label, weight = 'bold', fontsize  = fontsize_plot)
ax.set_xlabel(x_label, weight = 'bold', fontsize  = fontsize_plot)

[i.set_linewidth(2) for i in ax.spines.itervalues()] # change the width of the frame of the figure
ax.tick_params(axis='both', which='major', labelsize=fontsize_plot, size = 10, width = 2, pad = 7) 
plt.rc('font', weight='bold') ## make the labels of the ticks in bold

ax.plot(nb_seconds_since_initial_epoch_spock/3600., v_cyg_lvlh_diff[:,0], linewidth = 2, color = 'b', label = 'Along-track' )
ax.plot(nb_seconds_since_initial_epoch_spock/3600., v_cyg_lvlh_diff[:,1], linewidth = 2, color = 'm', label = 'Cross-track' )
ax.plot(nb_seconds_since_initial_epoch_spock/3600., v_cyg_lvlh_diff[:,2], linewidth = 2, color = 'r', label = 'Radial')

ax.set_ylim([np.min(v_cyg_lvlh_diff), np.max(v_cyg_lvlh_diff)])
ax.set_xlim([0, np.max(nb_seconds_since_initial_epoch_spock/3600.)])
ax.margins(0,0)
legend = ax.legend(loc='upper right', bbox_to_anchor=(0, 1), numpoints = 1,  title="", fontsize = fontsize_plot)
legend.get_title().set_fontsize(str(fontsize_plot))


fig_save_name = (cygfm_name + '_' + date_start.replace(":", "_") + '_to_' + date_stop.replace(":", "_") + ".txt").replace(".txt", "_difference_velocity_SpOCK_netcdf_lvlh.pdf")
fig.savefig(fig_save_name, facecolor=fig.get_facecolor(), edgecolor='none', bbox_inches='tight')  
